from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
import warnings
warnings.filterwarnings("ignore")

# SQL_ALCHEMY_DATABASE_URL = 'sqlite:///./todos_app.db'  # database url in the Todo current directory to connect to the file based SQLlite database
# This variable defines the URL to connect to your SQLite database. SQLite is a lightweight, file-based database engine. 
# The URL specifies the database dialect (sqlite://) and the path to the database file (./todos.db).

# engine = create_engine(SQL_ALCHEMY_DATABASE_URL , connect_args={'check_same_thread': False}) # creating an engine to interact with the database
# This line creates an SQLAlchemy engine object. The engine serves as a gateway to the database, providing a source of 
# connectivity and a target for SQL expressions generated by SQLAlchemy. 
# The connect_args parameter is specific to SQLite and is use
# d here to allow multiple threads to interact with the SQLite database.

# Production Level databse
SQL_ALCHEMY_DATABASE_URL = 'postgresql://dsbqgxef:Ydc1kPoYApmX4DfQ5Db9Q07aKcufDIwT@rain.db.elephantsql.com/dsbqgxef'

engine = create_engine(SQL_ALCHEMY_DATABASE_URL)

Sessionlocal = sessionmaker(autocommit=False , autoflush=False , bind = engine)
# This line creates a session factory using sessionmaker. A session is a workspace for object relational mapping. 
# It provides a way to persist and retrieve Python objects to and from the database. The bind parameter specifies the 
# engine to which this session will be bound. autocommit=False and autoflush=False are settings that control the behavior 
# of the session.

Base = declarative_base()
# SQLAlchemy's declarative base class is a base class for declarative class definitions. It's a base class for all your 
# SQLAlchemy models. By subclassing from Base, you're telling SQLAlchemy that your class will be an ORM class.

